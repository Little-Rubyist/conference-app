:talks:
- :title: 基調講演
  :abstract: ''
  :start_at: !!timestamp 2024-10-25T11:20:00+09:00
  :duration_minutes: 40
  :track: Room Red
  :speakers:
  - :name: Palkan
    :slug: palkan
    :github_username: palkan
    :gravatar_hash: fcfb2cc36659e401e70f80cd7bdb582b
    :bio: Vladimir is a creator of popular open-source tools, such as AnyCable, TestProf
      and Ruby Next, and a contributor to many other open-source projects, including
      Ruby on Rails and Ruby itself, and the author of the "Layered design for Ruby
      on Rails applications" book. He also leads the backend engineering team at Evil
      Martians, a product development consultancy from Earth, focusing on building
      maintainable web applications and developers’ productivity.
- :title: 'ワークショップ: Rackを理解しRailsアプリケーション開発の足腰を鍛えよう (1日目)'
  :abstract: |
    RailsアプリケーションはRackアプリケーションです。Railsでアプリケーションを書くということはすなわちRackアプリケーションを書いているということですが、普段Railsアプリケーション開発をする際にどこまでRackを意識しているでしょうか。
    RailsはRackをそこまで意識しなくても開発できるフレームワークですが、Railsの足回りを支えるRackを理解していないと、Railsアプリケーションのチューニング、デプロイ、トラブルシューティングなど様々な場面で立ち止まることになってしまいます。

    このワークショップでは一からRackを理解し、RackアプリケーションやRackミドルウェア、Rackサーバを自分で書いてみることでRackとはなんなのかしっかり理解しましょう。
  :start_at: !!timestamp 2024-10-25T12:00:00+09:00
  :duration_minutes: 90
  :track: ""
  :speakers:
  - :name: hogelog
    :slug: hogelog
    :github_username: hogelog
    :gravatar_hash: 8313c7d2124a05b77483f1535915ecdb
    :bio: |
      大学卒業以来いくつかのウェブ企業にてサービス開発エンジニアとして働き、前職クックパッドではサービス開発エンジニアから開発基盤エンジニア、エンジニアマネージャなどを経験。2021年6月にヘイ（現 STORES）に転職、また一エンジニアとしてバックエンドや基盤領域改善、組織の間に落ちたボール拾いなどを楽しく進めています。
- :title: RailsのPull requestsのレビューの時に私が考えていること
  :abstract: |
    Railsのpull Requestやissuesをレビューする際に、発表者がどのような考えを持っているか、またcontributorに何を期待しているかを、発表者が過去にレビューしたpull requestやissueを例に挙げて説明します。これにより、Railsへのcontributionの障壁を減らすとともに、Railsがより多くのユーザーからのフィードバックを受けるきっかけになることを期待しています。
  :start_at: !!timestamp 2024-10-25T13:30:00+09:00
  :duration_minutes: 30
  :track: Room Red
  :speakers:
  - :name: Yasuo Honda
    :slug: yahonda
    :github_username: yahonda
    :gravatar_hash: e2cb998e15d8e8fdef4f11a1f510fe74
    :bio: |
      Ruby on Rails committer / Maintainer of Active Record Oracle enhanced adapter / Oracle ACE Alum
- :title: Railsの仕組みを理解してモデルを上手に育てる - モデルを見つける、モデルを分割する良いタイミング -
  :abstract: |
    モデル群を上手に育てていく方法、特に「モデルの見つけ方」と「モデルを分割する良いタイミング」について、良い方法とその理由をRailsの考え方、仕組み、特徴から考察して話します。

    モデルの見つけ方では、特にイベント型モデル、POROをつかったメンテナンスしやすいRailsアプリのつくり方を考えます。Rails wayから外れずに設計を進める方法と、Rails wayから外れていくときにRailsの仕組みを理解してできる限りなめらかに新しい設計ルールを入れていく方法を考えます。

    モデルを分割する良いタイミングについては、バリデーションの条件分岐に着目します。一般に懸念されているモデルの肥大化を怖がりすぎないことを踏まえつつ、なぜそれが分割の良いタイミングであるのかをRailsの仕組みから考察します。また、分割の例としてフォームオブジェクトをつかった分割方法を考えます。

    対象者として、Railsアプリでの機能実装に慣れてきたあと、メンテナンスしやすいコードを書くレベルへステップアップしたい人へ向けて、長期にわたり役立つ技術を持ち帰ってもらえるようお話しします。
  :start_at: !!timestamp 2024-10-25T13:30:00+09:00
  :duration_minutes: 30
  :track: Room Blue
  :speakers:
  - :name: 五十嵐邦明
    :slug: igaiga
    :github_username: igaiga
    :gravatar_hash: 5ad0bb268dd2605b09165d464308cb7e
    :bio: |
      フリーランスのRailsエンジニア。いくつかの会社さんで技術顧問業として研修やペアプロ屋、コード健康診断やレガシーコード改善をやっています。プログラミングスクール「フィヨルドブートキャンプ」顧問。著書に「ゼロからわかる Ruby超入門」、「Railsの教科書」、「パーフェクトRuby on Rails［増補改訂版］」、「RubyとRailsの学習ガイド」、「Railsの練習帳」ほか。ガーネットテック373株式会社 代表取締役。
- :title: 推し活としてのrails new
  :abstract: |
    職業プログラマ。土日の趣味は観劇や遠征、家事のBGMは『雑談配信』、疲れた夜は『切り抜き動画』。読書のお供に『歌ってみた』、原稿のお供もまた、『歌ってみた』。プログラミングは平日の日中、仕事の間だけ。まかり間違っても土日にコードを書くなんて考えられない——そう思っていた時期もありました。私の推しが、利用中のサービスに見切りをつけ、次のサービスを探して迷走し始めるまでは。
    類似サービスはこの世にごまんとあり、ただ、知る限り推しのニーズには絶妙にフィットしないものばかり。Railsを仕事で書いてきた私なら、そんなサービス一日で、いや、三日でリリースしてやれるのに——。
    「そのサービスわいが作ってもええやろか」
    「えっ作るって何？」
    「一週間待ってくれよな」
    「作るって何？？？？」
    平日夜、仕事でもないのに `bundle exec rails new . ` をしてから今日にいたるまで。実際に何を作ったのか、Railsアプリしかわからない人間が選んだインフラ、Discord開発鯖の運用、『職業プログラマ』だからこそ手の届かない悔しさについてお話します。「キリ番」に覚えのある方、新たなファンアートの形に興味のある方、「土日にコードを書いていない人間」に興味がある方を、お待ちしています。
  :start_at: !!timestamp 2024-10-25T14:10:00+09:00
  :duration_minutes: 15
  :track: Room Red
  :speakers:
  - :name: sakahukamaki
    :slug: sakahukamaki
    :github_username: sakahukamaki
    :gravatar_hash: 03caec939a4cecd675b5fbe8b74a08fa
    :bio: 屋号『路地ラボ』にて個人事業主をやっています。本業は猫の下僕、副業はRailsエンジニアと同人誌制作です。要するに職業プログラマ。
- :title: そのカラム追加、ちょっと待って！カラム追加で増えるActiveRecordのメモリサイズ、イメージできますか?
  :abstract: |
    新機能の開発で、商品テーブルにタイムセールの価格を追加するという要件があるとします。
    よし、 add_column :items, :sale_price, :integer するぞ!

    ちょっと待ってください。そのテーブルは一度にたくさん取得されることはありませんか?
    既にschema.rbを見ると1画面に収まらないほどのカラムを持ったテーブルに育っていないですか?

    このセッションでは、カラム追加ではなくテーブル分割を選んだ方が良いのか、許容できる変更なのか、を設計ではなくメモリ使用量の観点から考えます。

    バッチ処理を行うときにfind_each で1000件ずつ取ってくるコードを書くけれども実際にはどれぐらいのメモリを使うのかな? といった疑問にも答えていきます。

    Ruby・Railsはわかってきたけど、さらに下のレイヤーでどんなことが起きているのかを知りたい、
    ひとつ下を歩けるRailsエンジニアになるための入口となるセッションを目指します。
  :start_at: !!timestamp 2024-10-25T14:10:00+09:00
  :duration_minutes: 15
  :track: Room Blue
  :speakers:
  - :name: Asayama Kodai
    :slug: asayamakk
    :github_username: asayamakk
    :gravatar_hash: 3a40474453d8613cc219306626b8728d
    :bio: |
      GMOビューティー株式会社でCTO、Railsエンジニアをしています。
      好きなプロトコルはAJP (Apache JServ Protocol)です。
- :title: モノリスでも使える！OpenTelemetryでRailsアプリのパフォーマンス分析を始めてみよう
  :abstract: |
    このトークでは、あなたのRailsアプリケーション開発と運用の大きな武器となるOpenTelemetryを用いたパフォーマンス分析を始める方法についてご紹介します。

    数年前まで、分散トレーシングを用いたパフォーマンス分析（APM）は導入・運用コストの高さから、大規模で複雑なマイクロサービスアーキテクチャでないと導入コストに見合わないという認識がありました。しかし昨今、技術仕様やSDK統一への動き（OpenTelemetry）や、各監視系SaaSベンダーの努力により、実装工数をはじめとする導入コストが大きく減少しました。

    一見モノリシックなRailsアプリケーション（モジュラーモノリスを含む）は分散トレーシングにマッチしないように思われるかもしれませんが、私はそうは思いません。むしろ、低レイヤーを意識せずにアプリケーションを書くことができるこの優れたフレームワークの内部で何がおこっているのか、どの処理にどれくらい時間をかけているのかを「一目見て」理解できることは非常に有用だと考えています。

    今回お話する内容を用いれば、皆さんはすぐにOpenTelemetryや各ベンダーが提供するライブラリを用いたパフォーマンス分析の検証を開始することができます。これにより、みなさんご自身が開発するRailsアプリケーションの運用が楽になれば嬉しいです。
  :start_at: !!timestamp 2024-10-25T14:35:00+09:00
  :duration_minutes: 30
  :track: Room Red
  :speakers:
  - :name: ymtdzzz
    :slug: ymtdzzz
    :github_username: ymtdzzz
    :gravatar_hash: 651976fb0488cfdcdae8c090a919892a
    :bio: 株式会社SmartHRでプロダクトエンジニアをしています。最近はRails、少し前はGolangを書いていました。
- :title: Sidekiqで実現する長時間非同期処理の中断と再開
  :abstract: |
    SmartHRでは非同期処理を効率的に実装するためにSidekiqを活用しています。従業員情報の一括登録やダウンロードなど、様々な用途に利用しています。

    しかし、一部の非同期処理では長時間実行されるジョブがあり、デプロイの過程で以下のような問題が発生していました：

    * 実行中のジョブを停止すると、想定外のタイミングで処理が中断される可能性がある
    * ジョブが最初から再実行されると、データの二重登録や実行時間の長期化が発生する可能性がある

    これらの懸念がデプロイの妨げとなっていました。このため、SmartHRではSidekiqのワーカーで長時間にわたるジョブを安全に中断・再開できる仕組みを構築することで、安心してデプロイができるようになりました。

    本セッションでは、デプロイの過程でSidekiqにおける長時間ジョブを安全に中断・再開する仕組みについて、実践的なアプローチを紹介し、実際の運用にどのように役立つかについて詳しく解説します。
  :start_at: !!timestamp 2024-10-25T14:35:00+09:00
  :duration_minutes: 30
  :track: Room Blue
  :speakers:
  - :name: hypermkt
    :slug: hypermkt
    :github_username: hypermkt
    :gravatar_hash: 022fe97731555344992c588527848cb7
    :bio: 株式会社SmartHRに所属するバックエンドエンジニアです。最近の趣味はRasberry pi pico wで、プラレールのラジコン化に奮闘しています。
- :title: カスタムしながら理解するGraphQL Connection
  :abstract: |
    GraphQLとは、クライアントが必要なデータだけを指定して取得できるデータクエリ言語及びランタイムです。Rubyではgraphql-rubyというライブラリを使うことでGraphQLを実装することができます。

    ハンドメイドECサービスであるminneでは、主にAPIをRailsで実装しており、検索画面で表示される作品の取得をGraphQL APIで実装しています。また、minneでは検索エンジンにOpenSearchに加えて、別の検索エンジンも利用しており、検索結果を取得できるREST APIが提供されています。

    今回はRailsアプリケーションでREST APIで返却される作品情報を取得し、クライアント用のGraphQL APIとして返却する実装しました。Active Recordから取得した結果をページネーションで返す実装に比べて、難しかった点・工夫した点を紹介します。

    このセッションでは、実装するにあたってGraphQLの基本概念を説明した後、minneで検索エンジンのREST APIをバックエンドとしてGraphQLによるページネーションを実現した経験から、graphql-rubyを用いてこれを実装する方法を説明します。
  :start_at: !!timestamp 2024-10-25T15:45:00+09:00
  :duration_minutes: 15
  :track: Room Red
  :speakers:
  - :name: yana-gi
    :slug: yana-gi
    :github_username: yana-gi
    :gravatar_hash: 2794084d45222e228896fd980a7c86e2
    :bio: フィヨルドブートキャンプを卒業後、2022年からGMOペパボ株式会社でハンドメイドマーケットminneのWebエンジニアをしています。料理とビールと中国茶が好きです。
- :title: cXML という電子商取引のトランザクションを支えるプロトコルと向きあっている話
  :abstract: |
    みなさんECサイトはよく使いますか？
    ECサイトでの購買は便利ですが、企業で物を買うときには複数の人が複数のECサイトで購買をします。そのため『どこで何を買ったかの把握や承認作業が難しい』という課題があります。我々が開発している購買管理システムは、さまざまなECサイトと連携して購買プロセスを一元化することでこの課題を解決しようとしています。
    購買管理システムでは「パンチアウト連携」という仕組みと「cXML」というプロトコルおよびドキュメントが使われています。

    ECサイトでのお買い物ではキャンセルや返品、価格変更など様々な例外ケースが存在します。
    こういったリアルワールドの複雑さを仕様に落とし込み、外部システムとの接続に必要なパンチアウト連携・cXMLという聞きなじみのない仕組みに対応したプロダクトを開発するなかで、多くの課題や苦労がありました。
    それらの課題とどう向きあって乗り越えてきたかお話しします。
  :start_at: !!timestamp 2024-10-25T15:45:00+09:00
  :duration_minutes: 15
  :track: Room Blue
  :speakers:
  - :name: phigasui
    :slug: phigasui
    :github_username: phigasui
    :gravatar_hash: c3c14eebafa2d71d71beb9996a0c9aa6
    :bio: 株式会社Leaner TechnologiesのWebアプリケーションエンジニアです。主に Ruby on Rails でリーナー購買のバックエンドの開発をしています。
- :title: JRubyのパワーを解き放つ：パフォーマンスと多様性向上のためのRailsアプリ
  :abstract: |
    既存のRuby on RailsアプリケーションをJRubyに移行する旅に出かけましょう。このトークでは、JRubyの隠れた可能性を明らかにし、特に高並行性シナリオにおけるメモリ使用効率の大幅な向上を示します。CRubyの GIL の制限を克服し、Javaのネイティブスレッドセーフティの利点を掘り下げます。
    JRubyが豊富なJavaライブラリのエコシステムへの扉を開き、堅牢なWeb開発のためのツールキットを拡張する方法を発見しましょう。実際の事例研究と実践的な例を通じて、C-bindingのgemをJava版に適応させることを含む、移行の課題と成功を紹介します。
    パフォーマンスの最適化、Javaライブラリの活用、またはJRubyの可能性に興味がある方に、JRubyをRailsプロジェクトに組み込むための情報に基づいた決定を行うための知識を提供します。
  :start_at: !!timestamp 2024-10-25T16:10:00+09:00
  :duration_minutes: 30
  :track: Room Red
  :speakers:
  - :name: Owaru Ryudo
    :slug: ryudoawaru
    :github_username: ryudoawaru
    :gravatar_hash: c7c4962ce9539d003fd7f0f06539e9d3
    :bio: |
      台湾からのRubyの伝道師です。RubyConf Taiwan、Rails Girls、RubyJamの主催だけでなく、5xRuby CO., LTDも設立し、台湾、日本、アメリカ、シンガポール、そして世界中の企業やスタートアップにRubyを用いた製品開発を支援しています。
- :title: リリース8年目のサービスの1800個のERBファイルをViewComponentに移行した方法とその結果
  :abstract: |
    私たちはリリースから8年目になるRailsアプリケーションを運用しており、その過程で1800個ものERBビューファイルを持つ規模に成長しました。
    Partial ERBによる運用は、パラメータ定義の曖昧さや、テンプレート内に多くのロジックが記述されること、記述の一貫性が低いことで、実行時エラーの発生や開発効率の低下を招いていました。
    私たちはPartial ERBをViewComponentに移行する決断をし、既存のビューファイルを自動変換スクリプトにより、移行しました。

    このセッションでは、私たちの具体的な移行戦略とその成果を共有し、同様の課題を抱える開発者にとって役に立つ情報を提供します。

    まず私たちの抱えていた課題について紹介します。
    Partial ERBとViewComponentの比較をしながら、ViewComponent gemについて解説します。
    続いて、1800個のERBファイルをViewComponentに移行するために、移行スクリプトを実装した過程について紹介します。
    最後に、ViweComponentの導入によって得られた効果や、レンダリング時間の計測結果について紹介します。
  :start_at: !!timestamp 2024-10-25T16:10:00+09:00
  :duration_minutes: 30
  :track: Room Blue
  :speakers:
  - :name: Naoyuki Kataoka
    :slug: katty0324
    :github_username: katty0324
    :gravatar_hash: 39889c3ddf73dc66382abbf4bad73866
    :bio: 株式会社シロク CTO。自社ECサイトであるシロクオンラインショップをRuby on Railsで開発・運用をしています。
- :title: ActionCableなら簡単? 生成 AIの応答をタイピングアニメーションで表示。実装、コスト削減、テスト、運用まで。
  :abstract: |
    ChatGPT をはじめとする LLM API は、レスポンスを全て受け取るのには時間がかかりますが、ストリーミングでデータを受け取ることができます。ストリーミングで得た結果をタイピングアニメーション風に表示することで、Web API としては遅い LLM を使いつつも UX を向上させることができます。
    Rails でこれを実現するには ActionCable を使うのが簡単そうな一方で、本番環境での運用例は少なく、以下のような不安が生まれてきました。

    - 生成結果が数文字ごとに大量に渡されるがそのままフロントエンドに返して大丈夫か
    - LLM へのプロンプト作成が重い処理の場合、非同期で動作させたいがどんな構成にすべきか
    - コネクションを長時間占有するがアプリケーションサーバで ActionCable を動作させてよいのか
    - 高い API なので開発環境のコストが気になる
    - テストしづらい

    本トークでは、LLM と ActionCable を用いた実装、テスト、インフラ構成のポイントと、各フェーズでの課題解決方法について紹介します。
  :start_at: !!timestamp 2024-10-25T16:50:00+09:00
  :duration_minutes: 15
  :track: Room Red
  :speakers:
  - :name: kaiba
    :slug: kaibadash
    :github_username: kaibadash
    :gravatar_hash: dcec0b8a824a0ffde6e634628d70b848
    :bio: |
      株式会社movでRailsエンジニアをしております。ChatGPTやGeminiを使うプロダクトを開発しています。心地よい開発環境構築のため、Rubocop修正、Flaky test直しも頑張ってます。本人が守銭奴なのでコストに気を使いながら開発をしたり、コスト削減にも喜びを感じます。ロードバイクと釣りが好きなので気軽に誘ってください。
- :title: Rails APIモードのためのシンプルで効果的なCSRF対策
  :abstract: |
    昨今のフロントエンドのリッチ化に伴い、 Rails を API モードで利用しフロントエンドとバックエンドを分離するアーキテクチャの採用が増えています。このような構成では、CSRF（クロスサイト・リクエスト・フォージェリ）対策に工夫が必要です。本セッションでは、伝統的なRailsアプリケーションのCSRF対策を振り返りながら、SPA + API構成でのCSRF対策の課題と、近年提案されている新しい対策方法について解説します。

    特に、ブラウザのヘッダ情報（Origin, SameSite, Fetch Metadata など）を活用したシンプルなCSRF対策に焦点を当て、その実装方法について具体例を交えて紹介します。新しい対策の利点や、Railsでの実装手法を学ぶことで、アプリケーションのセキュリティを向上させるための知識をアップデートする機会となるでしょう。
  :start_at: !!timestamp 2024-10-25T16:50:00+09:00
  :duration_minutes: 15
  :track: Room Blue
  :speakers:
  - :name: corocn
    :slug: corocn
    :github_username: corocn
    :gravatar_hash: 6b7ca499772f1ea867f6133778c77bbe
    :bio: 株式会社Leaner Technologies所属のエンジニア。小規模で拡張性のあるアーキテクチャを日々模索しながら、スタートアップでのプロダクト開発に取り組んでいます。以前はID基盤をSaaSとして提供するクラウドサービスのアンバサダーを務め、認証認可やセッション管理に関する情報発信を行っています。
- :title: 現実のRuby/Railsアップグレード
  :abstract: |
    Railsのアップグレードにおいては、公式のアップグレードガイドに従って作業するのが基本となります。しかしながら現実のプロジェクトではRubyとRailsの互換性、gemの互換性、開発が終了したgem・・・といった問題に直面し、一筋縄ではいきません。

    この発表では、Rails 5.0 だったアプリケーションを Rails 7.1 にアップグレードした事例を中心に、得られた知見を次のように章立てしてご紹介します。

    - 当時の課題
    - アップグレードのための準備
    - アップグレードの手順
    - 発生した問題とその解決
    - 得られたもの
    - アップグレードしていくために

    対象者は、『課題を感じているけどどのように対処すればよいかわからない中級者』並びに『課題に気づいていない初級者』です。それぞれ解決の糸口と、放置による問題の気づきに役立てていただけると思っています。上級者は「あるある」を楽しんでいただけることでしょう。

    Railsは今後も素晴らしいフレームワークとして進化を続けていきますが、その恩恵を受け続けるにはアップグレードから逃れることはできません。この発表が皆さんのプロジェクトの一助となれば幸いです。
  :start_at: !!timestamp 2024-10-25T17:15:00+09:00
  :duration_minutes: 30
  :track: Room Red
  :speakers:
  - :name: Yuichi Takeuchi
    :slug: takeyuweb
    :github_username: takeyuweb
    :gravatar_hash: cb6718ff7b9bc0ad427cfd48113c4a15
    :bio: |
      タケユー・ウェブ株式会社代表取締役。Railsが得意な受託開発の会社をやっています。Saitama.rb主催。Rails は 1.0 からの付き合い。

      受託開発サービスの運用や、他社開発サービスの引継ぎ、個別の改善依頼を通して、いくつものRailsアプリケーションのアップグレードを経験。
- :title: デプロイを任されたので、教わった通りにデプロイしたら障害になった件 〜俺のやらかしを越えてゆけ〜
  :abstract: |
    「大丈夫。PRをmainにMergeすればテストが走り、問題なければそのまま本番に反映される仕組みになってる。特に気にすることはないよ」

    これは、mainへのMerge権限の引き継ぎの際にそう言われ、深く考えずにあの緑色のボタンを押したら──それが障害になった話。

    本セッションでは、Rails + ECSのシンプルなアーキテクチャで、デプロイでやらかしてしまった実例とその対応策を、障害を起こした当時の状況を交えながらカジュアルにお話しします。
    取り上げるやらかしは、以下の3つを予定しています。

    ・カラムを追加するだけのデプロイで大量に例外が発生した件
    ・Sidekiqのジョブがデプロイの度に消し飛んでいた件
    ・社内のECS上で動かしている全サービスが、Graceful Shutdownできてなかった件

    また、普段の業務ではあまり意識しないデプロイに目を向けることで、効率よく技術的知見を広げられる点も併せてお話しします。

    俺のやらかしを越えてゆけ。
  :start_at: !!timestamp 2024-10-25T17:15:00+09:00
  :duration_minutes: 30
  :track: Room Blue
  :speakers:
  - :name: izumitomo
    :slug: izumitomo
    :github_username: izumitomo
    :gravatar_hash: 8f62c732f20618557af9b75a0248894e
    :bio: |
      株式会社Techouseで普段、Rails x GraphQLで開発しています。
      最近はセキュリティ周りの知見を深めており、セキスペに受かった翌日、Brakemanからお前SQLインジェクションしてるよ、と厚いご指導を賜りました。
- :title: Hotwire or React? 〜Reactの録画機能をHotwireに置き換えて得られた知見〜
  :abstract: |
    基本的なCRUD操作をSPA化するのにぴったりのHotwireと、リッチなUIを実現できるReact。それぞれに得意分野があり、チームの状況に合わせて適材適所な技術選定をできることが理想です。しかし、Hotwire便利！と言われますが、Turboに注目されることが多く、Stimulusが脚光を浴びている事例はあまり聞きません。

    本トークでは、Railsアプリケーション内のviewの一部にReactで実装された録画機能をHotwire（Turbo + Stimulus）へ置き換えを試みた事例をもとに、特にStimulusを使った開発体験に着目しながら、HotwireとReactなどのフロントエンドフレームワークをどのように使い分けると幸せに開発できるのかを考察します。
  :start_at: !!timestamp 2024-10-25T17:55:00+09:00
  :duration_minutes: 15
  :track: Room Red
  :speakers:
  - :name: Haruna Tsujita
    :slug: haruna-tsujita
    :github_username: haruna-tsujita
    :gravatar_hash: cb504213a5310e01faabbc0b3fca3d39
    :bio: " Webアプリケーションエンジニア。英語塾を運営する会社でライティングの添削サービスを開発しています。正規表現とNiziUが好きです。"
- :title: Capybara+生成AIでどこまで本当に自然言語のテストを書けるか？
  :abstract: |
    Railsには、システムテストとよばれるE2Eテストを簡単に実行できるフレームワークがあります。生成AIの登場によって、テストコードを書くことは昔ほど苦ではなくなってきました。しかしE2Eテストは作っておしまいではなく、Webサイトを改修するたびにメンテナンスをしなくてはいけません。なかなか面倒です。

    これだけAIが賢くなったら、自然言語でシステムテストを書いて、サイトが変わっても自然言語の記載を変えたらそのまま動くようにはできるはずです。
    まだまだ精度は出ないなど運用上の課題はありますが、Railsサーバーを起動してAIにWebサイトを読み取らせて自然言語でテスト内容を入力して結果を得る、というニッチな方法を、Capybaraドライバを拡張して実装する方法について解説します。
  :start_at: !!timestamp 2024-10-25T17:55:00+09:00
  :duration_minutes: 15
  :track: Room Blue
  :speakers:
  - :name: Yusuke Iwaki
    :slug: YusukeIwaki
    :github_username: YusukeIwaki
    :gravatar_hash: 6f411237444fb0f49c63baeb9c5f2a38
    :bio: |
      福岡でMDMサービスの開発に携わっているエンジニアです。"なんかよくわからんけど動いてる"コードを読み解くのが得意です。PlaywrightをRailsシステムテストで利用するためのライブラリをOSS開発しています。
- :title: 作って理解する RDBMSのしくみ
  :abstract: |
    Webアプリケーションを開発する上で欠かせないRDBMS。
    テーブル設計の手法やクエリの最適化などのテクニックについては、日々の業務を通じて理解を深めていると思います。
    しかし、その内部構造がどうなっているのか、どのような仕組みで動いているのかについては、あまり知らない方も多いのではないでしょうか。

    私も少し前まではその一人でした。
    しかし、ふと「RDBMSも誰かが作っているのだから、自分でも作れるのではないか」と思い、　「楽しそうだから作ってみよう」 と実際に作ってみることにしました。
    どのようなしくみで動いているのかを知ることは、その道具を存分に使うためにとても重要だと感じています。

    このトークを通じて、RDBMSの内部構造やしくみを知ることで、明日からRDBMSをより効果的に使いこなすための気づきを得る一助となるようなお話をしたいと思います。
    普段使っている道具がどのようなしくみや構造になっているか興味はありませんか？
  :start_at: !!timestamp 2024-10-26T10:00:00+09:00
  :duration_minutes: 30
  :track: Room Red
  :speakers:
  - :name: Yudai Takada
    :slug: ydah
    :github_username: ydah
    :gravatar_hash: 9de693b82eb0750d11d715cc9a447965
    :bio: |
      The committer of [ruby/lrama](https://github.com/ruby/lrama). Co-Founder of [Kyobashi.rb](https://kyobashirb.connpass.com/). A Software engineer at ANDPAD, Inc.
- :title: 都市伝説バスターズ「WebアプリのボトルネックはDBだから言語の性能は関係ない」
  :abstract: |
    性能は重要です。性能とは機能です。性能とは競争力です。

    Webアプリケーションの性能改善に取り組む際、最初に槍玉に上がるのはデータベース（SQL）の待ちに代表されるI/Oでしょう。これに手を入れることで大きな性能改善を得られることは少なくありません。

    では、I/Oではない部分 ―Railsの処理、Rackサーバー、あるいはRuby自体の性能― は十分無視できるのでしょうか。答えは「否」。プロファイルであからさまなボトルネックとして表出しない、CPUによる処理の部分にも大きな宝が眠っています。

    これは何も性能を最後の一滴まで絞り出す話や、Ruby/Railsにパッチを送ろうという話ではありません。CPU timeとI/O timeの関係の理解は、Pumaに代表されるマルチスレッドなサーバーを使いこなす上でも大変重要です。スレッド数は重要なパラメータですが、これを当て推量に頼らず調整するためには何を観察すれば良いのでしょう？

    実は日常の開発に影響している、Rubyやフレームワークの性能設計を探求しましょう。「ボトルネックつぶし」ではない方法で性能を改善し、都市伝説をバスティングする様子をお見せします。

  :start_at: !!timestamp 2024-10-26T10:00:00+09:00
  :duration_minutes: 30
  :track: Room Blue
  :speakers:
  - :name: Daisuke Aritomo (osyoyu)
    :slug: osyoyu
    :github_username: osyoyu
    :gravatar_hash: c344233e98f3f81392b450af58caca9c
    :bio: パソコンおたく。株式会社スマートバンク勤務。Rubyプロファイラ "[Pf2](https://github.com/osyoyu/pf2)" の開発者。
- :title: 'Cache to Your Advantage: フラグメントキャッシュの基本と応用'
  :abstract: |
    キャッシュはRailsアプリケーションのパフォーマンス向上において非常に有効な手法ですが、不安からあまり利用していない方も多いのではないでしょうか。
    このセッションでは、Railsのフラグメントキャッシュに焦点を当て、その基本的な概念、利用方法、そしてキャッシュ無効化戦略について詳しく解説します。
    具体的には、DHHが提案した効率的なキーベースのキャッシュ無効化戦略やフラグメントキャッシュのキー決定方法について説明し、それがどのようにしてデータの一貫性を保ちながらキャッシュを管理するかを掘り下げます。
    次に、私が開発した「レンダリングキャッシュ」gemを紹介し、フラグメントキャッシュとアクションキャッシュの利点を統合した新しいアプローチを提案します。さらに、Turbo Framesを活用して動的コンテンツを分離する方法を説明し、動的部分と静的部分を分離することで全体のキャッシュ効率を向上させる設計方法を提案します。このセッションを通じて、フラグメントキャッシュのしくみを理解し、Railsアプリケーションのパフォーマンスを向上させるための実践的な手法をお伝えします。自信を持ってキャッシュを使えるようになりましょう。"
  :start_at: !!timestamp 2024-10-26T10:40:00+09:00
  :duration_minutes: 15
  :track: Room Red
  :speakers:
  - :name: Toru Kawamura
    :slug: tkawa
    :github_username: tkawa
    :gravatar_hash: 4bc8a6fb46ecbd1a5432e58225954ea3
    :bio: 株式会社ソニックガーデンのプログラマ。RESTafarian。Sendagaya.rb 共同主催。
- :title: ActiveRecord SQLインジェクションクイズ (Rails 7.1.3.4)
  :abstract: |
    あなたのRailsアプリケーションは完璧にSQLインジェクションを防げていますか？

    もし新人プログラマがSQLインジェクションの可能性あるコードをプルリクエストしてきたら、あなたはそれをリジェクトできますか？

    本トークではクイズも織り交ぜながら、RailsアプリケーションでSQLインジェクションを正しく防ぐための基礎知識、RailsがどのようにSQLインジェクションを防いでいるのか、Brakemanがどのように安全でないコードを検知しているのか等をコード解説を交えてお話しします。

    またIPAの「安全なウェブサイトの作り方」に言及されている対策に対してRailsアプリケーションがどのように実装しているかも確認しながら、一般的なWebアプリケーションセキュリティについての基礎知識も得る機会になれば幸いです。

  :start_at: !!timestamp 2024-10-26T10:40:00+09:00
  :duration_minutes: 15
  :track: Room Blue
  :speakers:
  - :name: Koji NAKAMURA
    :slug: kozy4324
    :github_username: kozy4324
    :gravatar_hash: 41a3b3d39a9f1f097eeca98e90622576
    :bio: |
      Kashiwa.rb主催
      Shinjuku.rb所属
      Classi株式会社所属
      現所属にてRuby on Railsを使った新規サービス開発プロジェクトに従事
- :title: 推し活のハイトラフィックに立ち向かうRailsとアーキテクチャ
  :abstract: |
    ライブイベント会場でのグッズ販売(物販)では、当日の在庫に限りがあるため、グッズをどうしても手に入れたい熱狂的なファンが早朝から待機列を作り、数時間以上待つことがよくあります。このような物販現場を改善し、1人でも多くのファンが心地よい体験を持ち帰れるように、我々はイベント向けモバイルオーダーアプリ「caravan」を開発しました。

    先着販売開始直後には、秒間400件近い決済リクエストが突発的に発生します。これは、通常のシステム構成では対応しきれない膨大なトラフィックです。さらに、サービスダウンや数量限定商品を在庫以上に販売してしまう問題は、サービスの信頼性に重大な影響を与えます。

    このようなハイトラフィックでクリティカルな状況に、PostgreSQL、Redis、CDNを活用して、どのようにしてRuby on Railsで立ち向かっているのかについてお話しします。
  :start_at: !!timestamp 2024-10-26T11:05:00+09:00
  :duration_minutes: 30
  :track: Room Red
  :speakers:
  - :name: Hayato OKUMOTO
    :slug: falcon8823
    :github_username: falcon8823
    :gravatar_hash: af5dcc1970148a511bf8a393f42dda96
    :bio: "株式会社TwoGateの取締役CTOを務めています。創業時から開発チームを組成し、リードしてきました。インフラ、バックエンド、フロントエンドにわたる幅広い技術選定と開発を担当し、全体の技術戦略を指揮しています。"
- :title: OmniAuthから学ぶOAuth 2.0
  :abstract: |
    Railsで仕事をしていると、外部サービスを用いたログイン・ユーザー登録のためにOmniAuth gemを用いることがよくあります。OmniAuthは外部サービスとの接続を抽象化した「ストラテジ」として提供しており、外部サービスのことをよく知らなくとも認証部分を利用できるようになっています。
    では、この裏側では実際には何が行われているのでしょうか。ここでは実際の開発において頻繁に利用されるストラテジであるOAuth2 StrategyおよびOpenID Connect Strategyについて掘り下げ、OmniAuthが隠蔽してくれている実装とは何か、またOAuth2やOpenID Connectの規格についてもお話します。
  :start_at: !!timestamp 2024-10-26T11:05:00+09:00
  :duration_minutes: 30
  :track: Room Blue
  :speakers:
  - :name: ykpythemind
    :slug: ykpythemind
    :github_username: ykpythemind
    :gravatar_hash: e83cdc415df47ab3eae30957ae7e2d33
    :bio: |
      ゆきぽよです。STORES 株式会社でエンジニアリングマネージャをしています。
      別の活動として、音楽やホラー動画を専門として創作をしています。https://twitter.com/ykpythemind
- :title: 'ワークショップ: Rackを理解しRailsアプリケーション開発の足腰を鍛えよう (2日目)'
  :abstract: |
    RailsアプリケーションはRackアプリケーションです。Railsでアプリケーションを書くということはすなわちRackアプリケーションを書いているということですが、普段Railsアプリケーション開発をする際にどこまでRackを意識しているでしょうか。
    RailsはRackをそこまで意識しなくても開発できるフレームワークですが、Railsの足回りを支えるRackを理解していないと、Railsアプリケーションのチューニング、デプロイ、トラブルシューティングなど様々な場面で立ち止まることになってしまいます。

    このワークショップでは一からRackを理解し、RackアプリケーションやRackミドルウェア、Rackサーバを自分で書いてみることでRackとはなんなのかしっかり理解しましょう。
  :start_at: !!timestamp 2024-10-26T11:35:00+09:00
  :duration_minutes: 90
  :track: ""
  :speakers:
  - :name: hogelog
    :slug: hogelog
    :github_username: hogelog
    :gravatar_hash: 8313c7d2124a05b77483f1535915ecdb
    :bio: |
      大学卒業以来いくつかのウェブ企業にてサービス開発エンジニアとして働き、前職クックパッドではサービス開発エンジニアから開発基盤エンジニア、エンジニアマネージャなどを経験。2021年6月にヘイ（現 STORES）に転職、また一エンジニアとしてバックエンドや基盤領域改善、組織の間に落ちたボール拾いなどを楽しく進めています。
- :title: 入門『状態』
  :abstract: |
    プログラムにおいて「状態」という言葉を聞くことがあると思います。この状態とは一体どういうものなのでしょうか？また状態が多いとよくないという話も紹介されますが、どのような側面においてよくないのでしょうか？

    この発表では、主に初学者から中級者を対象に、プログラムの実装における「状態」とは何かについて説明します。また、実際のRuby on Railsでの開発において「状態」が複雑化しやすいケースと、その解決方法についての事例もご紹介します。

    明日からすぐに実践できる、「状態」の適切な取り扱い方法をお伝えできればと思います。
  :start_at: !!timestamp 2024-10-26T13:05:00+09:00
  :duration_minutes: 15
  :track: Room Red
  :speakers:
  - :name: しんくう
    :slug: shinkufencer
    :github_username: shinkufencer
    :gravatar_hash: be85784057d8cad4fbb2dd43cbdecf89
    :bio: 普段の仕事では業務の交通整理をメインでやっていますが、ときどきRailsを書いたりしています。
- :title: 約9000個の自動テストの時間を50分から10分に短縮、偽陽性率(Flakyテスト)を1%以下に抑えるまでの道のり
  :abstract: |
    弊社の Rails アプリケーションは、7年間の開発を経て、自動テストの数が8871個、CIにかかる時間が50分、偽陽性(Flaky)によってCIが失敗する確率が15%という状況でした。
    この状況から、CIの高速化 & 安定化のチームを発足し、CIの時間を10分、失敗率は1%程度と、大幅な改善を達成しました。
    本セッションでは、この道のりを振り返り、以下のような観点から知見をお話しします。

    - CI・自動テストに関する根本課題の整理
    - 改善に寄与した施策とその寄与度
    - 効果がなかった施策とその理由
    - 全員が機能開発を続けながら、サイドプロジェクトとして改善を達成するための工夫
  :start_at: !!timestamp 2024-10-26T13:05:00+09:00
  :duration_minutes: 15
  :track: Room Blue
  :speakers:
  - :name: hatsu
    :slug: hatsu38
    :github_username: hatsu38
    :gravatar_hash: 3e88a30cc1f91a409038b3a06fb5dcb3
    :bio: Web系のエンジニアしてます。 RubyやReactやTypeScriptをよく触ります。Railsでサービス作ること多いです。インフラやCIもなんとかやっています。なんとか。
- :title: Hotwire光の道とStimulus
  :abstract: |
    私はここ数年、Hotwireを使ってRailsアプリケーションを開発しています。Hotwireはとても強力な技術ですが、いろいろなことができるからこそ、かえって本質がクリアになっていないという思いを抱き、効果的な設計原則の言語化に努めてきました。Hotwireを使った開発を続ける中で、私の理想とする設計原則「Hotwire光の道」について、さらに言語化が進んできたので、それをご紹介したいと思います。

    「Hotwire光の道」の核心は、サーバサイドですべてをコントロールできるようにすることです。今回は、Stimulusの使いこなしを題材に、この設計原則について話していきたいと思います。

    Stimulusを用いると、クライアント側で動くJavaScriptを、手軽に、ある程度管理しやすい形で書くことができます。しかし、だからこそ、クライアント側にいろいろな処理を書いてしまいがちです。私自身も、開発のなかでうっかり「光の道」から外れて、クライアント側での実装をしてしまっていたことが何回もあります。そういう場合は、後になって道から外れていたことに気づき、リファクタリングをしています。今回のトークでは、そういった具体例を出しながら、Stimulusをどう使うと（または、どう使わないと）Hotwireの良さを活かしたアプリケーションを作れるのかについて、私の考えをご紹介したいと思います。
  :start_at: !!timestamp 2024-10-26T13:30:00+09:00
  :duration_minutes: 30
  :track: Room Red
  :speakers:
  - :name: Yasuko Ohba (nay3)
    :slug: nay
    :github_username: nay
    :gravatar_hash: b5689026d84bb3a823c82590eefc3b8f
    :bio: |
      株式会社万葉 代表取締役 & Railsエンジニア。"構造厨" を標榜する、設計・実装大好き人間です。「現場Rails」本の著者の一人です。Kaigi on Rails 2023では、主に Turbo Frames を題材に、Hotwireらしい設計原則についてお話しました（『Hotwire的な設計を追求して「Web紙芝居」に行き着いた話』）。
- :title: Sidekiq vs Solid Queue
  :abstract: |
    Railsで時間のかかる処理はなんらかのバックグラウンドワーカーに委譲して、アプリケーションとは別で対応するのが一般的なプラクティスです。バックグラウンドワーカーの選択肢としては長らくSidekiqが高いシェアを維持していましたが、Rails8.0からSolid Queueという新しいバックグラウンドワーカーが標準として採用されることになり、今後勢力図が変わっていくことが予想されます。

    Solid QueueはActive Jobのアダプタとして使うことが前提の、DBベースのバックグラウンドワーカーです。Active Jobのアダプタとして使えるバックグラウンドワーカーも、DBベースのバックグラウンドワーカーも特に珍しいものではありません。ではなぜ今になってSolid Queueが生まれ、Rails標準として採用されようとしているのでしょうか？

    この発表では、Rails用のメジャーなバックグラウンドワーカーの変遷を紹介することでSolid Queueが生まれるまでの経緯を説明します。また、現在広く使われているSidekiqの機能や特性をSolid Queueと比較することで、今後どちらを選択したらよいかの指針を示します。
  :start_at: !!timestamp 2024-10-26T13:30:00+09:00
  :duration_minutes: 30
  :track: Room Blue
  :speakers:
  - :name: Shinichi Maeshima
    :slug: willnet
    :github_username: willnet
    :gravatar_hash: 6ac7c50770603b53964d44db373e8e48
    :bio: |
      株式会社ウィルネット代表。複数の会社の技術顧問しています。ginza.rb主催。著書にパーフェクトRuby on Rails(共著)、Ruby on Rails6エンジニア養成読本(共著)、WEB+DB PRESS で Ruby 記事連載(Vol 93~95)
- :title: The One Person Framework 実践編
  :abstract: |
    DHHが2021年に「The One Person Framework」という記事を書きました。
    https://world.hey.com/dhh/the-one-person-framework-711e6318

    私はkairanbanというWebアプリケーションをSinatra+React(Next.js)でつくっていました。少し前の私がアプリケーションを書くときはこのような構成になっていました。しかし、DHHの記事を読んだり、RailsConfのキーノートを視聴することで、小さなアプリケーションこそRailsで書いてもよいと感じるようになりました。
    近年、Ruby on Railsが普遍的に仕事で使われるようになり、自分とRailsとの向き合い方や、そこから生じる忌避感をぬぐうべく私はKairanbanをRuby on Railsで書き直すことにしました。
    書き直しをする上で、いくつかの点においてRuby on Railsの良さを改めて発見することができたのでお話します。
  :start_at: !!timestamp 2024-10-26T14:10:00+09:00
  :duration_minutes: 15
  :track: Room Red
  :speakers:
  - :name: asonas
    :slug: asonas
    :github_username: asonas
    :gravatar_hash: 1ac0db1ea05c74a21a07549c285b0b0d
    :bio: ソフトウェアエンジニア
- :title: Importmapを使ったJavaScriptの読み込みとブラウザアドオンの影響
  :abstract: |
    Rails 7で標準となったimportmapとブラウザアドオンのAdBlockによる問題について解説します。
    importmapを使用してJavaScriptライブラリを動的にインポートする際に、AdBlockが原因でライブラリの読み込みに失敗するユーザーが発生する問題に直面しました。

    まず、importmapの仕組みと従来のJSバンドル手法との違い、利点について紹介します。DHHが推奨する「no build」の理念に触れつつ、実際のプロジェクトでの実践例や課題についても共有します。
    次に、AdBlockがJavaScriptの読み込みをブロックする問題に直面した経緯を紹介します。私たちのアプリケーションで一部のユーザーが意図しない動作を経験していることに気づき、サーバーサイドエラーの調査を開始しました。ログ解析を通じて問題を特定し、具体的な解決策を見つけるまでのプロセスを解説します。

    importmapを使用したアプリ開発の利点と落とし穴、その回避方法についてお話します。
  :start_at: !!timestamp 2024-10-26T14:10:00+09:00
  :duration_minutes: 15
  :track: Room Blue
  :speakers:
  - :name: shu_numata
    :slug: swamp09
    :github_username: swamp09
    :gravatar_hash: 2bd4ee7fa1844b0aeecc1e7c94a4093c
    :bio: |
      2017年から株式会社永和システムマネジメントでRailsエンジニアとして働いています。
      現在はHotwireとImportmapを利用したプロジェクトでお仕事しています。
- :title: Data Migration on Rails
  :abstract: |
    Railsアプリケーションの長期運用においてスキーマやデータの変更は不可避です。スキーマ変更（schema migration）にはRailsが公式に仕組みを提供していますが、データ変更（data migration）には決定的なデファクトスタンダードが存在しません。そのため、各現場で独自のdata migration管理方法を編み出したり、類似する多様なgemの選定に苦心した経験をお持ちの方も多いでしょう。

    長年Railsに携わる開発者の多くがこうした経験をしているにも関わらず、これらのアプローチについて広く議論がなされていない現状があります。本セッションではこの状況を再考し、Railsにおけるdata migrationの既存アプローチ（SQLによる直接操作、Rakeタスク、gem利用など）を解説します。各手法のメリット・デメリット、発生しうるトレードオフ、実際のユースケースを紹介するとともに、migration scriptの実行環境やレビュープロセスなど、手法によらず考慮すべき運用課題についても視点を提供します。

    本セッションを通じて、参加者がプロジェクトに応じた最適なアプローチを選択できるようになることはもちろん、既存の運用方法を見直す機会にもなるでしょう。data migrationに対する理解と視野を広げ、さらなる議論の発展につながることを期待しています。
  :start_at: !!timestamp 2024-10-26T15:05:00+09:00
  :duration_minutes: 30
  :track: Room Red
  :speakers:
  - :name: ohbarye
    :slug: ohbarye
    :github_username: ohbarye
    :gravatar_hash: 0ed400174f90a4bcee05f3455597932f
    :bio: |
      SmartBank社で家計簿プリカ「B/43」の開発・運用をしています。Ruby on Railsによるmobile application向けAPI開発、Single Page Application開発が主な業務内容です。
- :title: Tuning GraphQL on Rails
  :abstract: |
    話し手はモノリス構成のRuby on Railsのアプリにおいて、大量に発生していたN+1問題を多く解決してきました。そのときに利用した実践的なテクニック及び、バッチローダーの内部的な実装詳細について紹介します。
    特にGraphQLのクエリがどのように実行されるか、バッチローダーがどのように実行されるかについては普段エンジニアが意識しづらい領域ではあるものの、認知の有無によって大きくパフォーマンスは異なります。このセッションを聞いたRubyistが書くGraphQLの実装が明日から速くなるようなセッションにします。

  :start_at: !!timestamp 2024-10-26T15:05:00+09:00
  :duration_minutes: 30
  :track: Room Blue
  :speakers:
  - :name: Kazuhiko Yamashita
    :slug: pyama86
    :github_username: pyama86
    :gravatar_hash: df7cc2cc2e207586248e60d879d85911
    :bio: 国内のWEBサービス提供企業においてSREやPlatformの領域で、主にRubyとGoを用いてあらゆる技術課題を解決することを生業にしています。最近の興味領域はMLで、AIによって様々な実装が容易になったことを利用して、高速な処理が求められる領域にミニAIとしてMLで作成されたモデルを配置していくような取り組みに興味があります。
- :title: 30万人が利用するチャットをFirebase Realtime DatabaseからActionCableへ移行する方法
  :abstract: |
    エンタメマッチングアプリ「pato」は、長らくFirebase Reailtime Databaseを使ってチャット機能を提供してきました。
    しかしユーザー数増加に伴い、一斉送信への負荷が高まってきました。全ユーザーに送信するのに、時には1日以上かかることも。
    そこで私はFirebase Realtime DatabaseからMySQLに移行し、Firebaseの制約を乗り越えつつ、ActionCableを使ってリアルタイム通信を実現しました。
    本トークではRuby on RailsからFirebase Realtime Databaseを使う上での苦労と、乗り換えるに至った背景、実際にどのように移行作業を行なったのかをお話しし、
    リアルタイムチャットアプリケーションを実装する上での知見を共有できると幸いです。
  :start_at: !!timestamp 2024-10-26T15:45:00+09:00
  :duration_minutes: 15
  :track: Room Red
  :speakers:
  - :name: Ryosuke Uchida
    :slug: ryosk7
    :github_username: ryosk7
    :gravatar_hash: 1ebed78c0c87d05afd71cac15f36e6be
    :bio: |
      Roppongi.rb オーガナイザー。
      エンタメマッチングアプリ「pato」の運用と開発を行っています。
      ホームサウナは「三ノ輪湯」です。
- :title: 大事なデータを守りたい！ActiveRecord Encryptionと、より安全かつ検索可能な暗号化手法の実装例の紹介
  :abstract: |
    近年WEBサービスに対する攻撃が増しており情報漏洩などが相次いでいますが、漏洩した場合の被害を抑える手法の1つにデータの暗号化があります。
    RailsにはActiveRecord Encryptionという組み込みの暗号化機構がありますが、デフォルトの使い方では暗号鍵を人間が管理する必要があり依然として流出のリスクがあります。

    暗号化の安全度を高めるためには
    1）AWS等が提供するKMS(Key Management Service)などを使い暗号鍵の管理をオフロードする
    2）個人情報やクレジットカード番号、マイナンバーのような最重要情報を保存する場合にはレコードごとに異なる暗号鍵を使う
    といったさらなる工夫が必要ですが、現状のActiveRecord Encryptionでこれらを実現するにはかなりのカスタマイズが必要になります（2はそもそも実現できない）。
    またビジネス要件として暗号化はしたいが検索もしたい場合もあります。

    本発表ではRailsにおけるActiveRecord Encryptionを含めその他の暗号化手法を併せて紹介し、attr_encrypted gemを用いて上記のような複雑な要件を満たす方法や、永続化層では暗号化しつつ検索可能にする実装方法についても紹介します。
    本発表を通じて各暗号化手法のメリット・デメリットや使い所を理解して頂くことを目的とします。
  :start_at: !!timestamp 2024-10-26T15:45:00+09:00
  :duration_minutes: 15
  :track: Room Blue
  :speakers:
  - :name: 小林悟史（小林ノエル）
    :slug: f-world21
    :github_username: f-world21
    :gravatar_hash: 9e014a8c38462fcaf2c136e65837b348
    :bio: |
      ブルーモ証券取締役CTO。
      米国株・米国ETF専業の長期資産形成特化型の投資アプリ【ブルーモ】を開発しています。
      ブルーモ証券の共同創業者でもあり、ブルーモアプリの開発立ち上げから技術選定、基本設計や実際のサービス開発の実装もしてきました。
      今回ご紹介する手法もブルーモアプリの開発を進めるうえで必要になった手法であり、実際にブルーモのサービスの中にも組み込まれている手法です。
      証券会社のサービスを構築するにあたり、安全にデータを保管する方法をご紹介します。
- :title: サイロ化した金融システムを、packwerk を利用して無事故でリファクタリングした話
  :abstract: |
    私たちが提供している金融系のサービスでは、既存動作を最大限に担保しながら品質を向上させることが強く求められます。サービス開始以来10年以上運用されているRailsアプリケーションはモノリシックな構造となっており、サイロ化による弊害が顕在化していました。例えば、複雑なロジックがアプリケーションの各所に散在していることが、品質向上の妨げとなっていました。

    そうした背景の中で、複雑なロジックの共通化を行う際に、今後の改善に繋がるフレーム検討を行いました。検討の末、モジュラーモノリス構造を採用し、packwerk を使って段階的に移行を進めることとしました。結果として、無事故でリファクタリングを達成しています。

    本セッションではサイロ化した金融システムをリファクタリングした事例を基に、**安全な手段としてpackwerkを採用した経緯、packwerkだけでは防ぎきれない観点とその対策、現在検討している今後の展望**についてお話ししたいと思います。
  :start_at: !!timestamp 2024-10-26T16:10:00+09:00
  :duration_minutes: 15
  :track: Room Red
  :speakers:
  - :name: Kota Kusama
    :slug: cc-kusama
    :github_username: cc-kusama
    :gravatar_hash: 9dea3e1ac1fdb3cbcbf44740d4c85098
    :bio: 2022年にコインチェック株式会社に入社。2023年9月よりアプリケーション基盤グループのメンバーとして、共通部品のパッケージ化などの、各事業部の開発速度、品質、生産性の向上につながる基盤作りの仕事をしています。
- :title: omakaseしないためのrubocop.yml のつくりかた
  :abstract: |
    お手元のRailsアプリにもきっと導入されているRubocop。Rails 7.2ではとうとう`rails new` した際にデフォルトで入るgemとなりました。

    Rubocopは、コードスタイルをチームで統一するのに非常に便利なツールです。その一方で、自由度が非常に高いため「rubocop.yml をどう設定するか」はみなさんの悩みのタネになっているのではないでしょうか。実際、私たちのチームも同様の悩みを抱えていました。

    本発表では、9ヶ月にわたってチームで少しずつ議論を進め、ToDo を解消しながらrubocop.ymlを作り上げていった過程をお話しします。
  :start_at: !!timestamp 2024-10-26T16:10:00+09:00
  :duration_minutes: 15
  :track: Room Blue
  :speakers:
  - :name: Shu Oogawara
    :slug: expajp
    :github_username: expajp
    :gravatar_hash: 52d23923724e1a50fb251d2a0ea122a9
    :bio: |
      リンカーズ株式会社にてエンジニアリングマネージャーをやっています。Rails製ビジネスマッチングサービス「Linkers Sourcing / Marketing」を担当中。Engineering Manager Meetupのコアスタッフです。趣味は秘境駅めぐりと深夜ラジオ。
- :title: Identifying User Identity
  :abstract: |
    Railsアプリケーションの多くには、サービスの利用者を表す "User" モデルが存在し、ユーザー登録したりログインしたりできます。ふだんは gem でサクッと実装したり、あるいはすでに開発済みで改めて手をいれることが少ないかもしれません。それでもサービス内でも重要なエンティティの一つであることは間違いありません。

    そこで、本講演では「利用者」をあらわす「ユーザーのアイデンティティ」とは何か、そのデータをどう永続化させるか、ランタイムではどう見えるか、といったことを考察してみようと思います。

    これから rails new する人はもちろん、既存サービスでユーザー周りの機能と向き合っている方々(たいへんですよね...)にとっても概念を整理する助けになれればと思います。
  :start_at: !!timestamp 2024-10-26T16:35:00+09:00
  :duration_minutes: 30
  :track: Room Red
  :speakers:
  - :name: MOROHASHI Kyosuke
    :slug: moro
    :github_username: moro
    :gravatar_hash: 70e13d9877054026fda46d5a5b53a236
    :bio: |
      日々Railsアプリケーションを書いているプログラマ。Ruby と Rails、TDDが好き。
      著書に「Rails 3レシピブック(共著)」「はじめる! Cucumber」など。

      好きなメソッドの変遷は、Array#each から Object#extend を経て Hash#compact。
- :title: 'Type on Rails: Railsアプリケーションの安全性と開発体験を型で革新する'
  :abstract: |
    Rubyコミュニティにおいても型システムの導入というのは近年ホットな話題になっています。しかし、実際に型システムを導入するには至っていないチームも多いのではないでしょうか。
    本発表では、ミッションクリティカルなものを含む複数のRailsアプリケーションに型チェッカーであるSorbetを導入し、1年以上運用して得られた知見を共有します。
    実際にSorbetをRailsアプリケーションに導入するためのツールや具体的な手順、それにあたっての注意点などを紹介し、参加者が実際のアプリケーションに型システムを導入することができる状態を目指します。また、型システムをより活かしたRailsアプリケーションの設計・実装について、代数的データ型やその一種であるResult型などとともにRailsでの実例を交え紹介します。
  :start_at: !!timestamp 2024-10-26T16:35:00+09:00
  :duration_minutes: 30
  :track: Room Blue
  :speakers:
  - :name: kazzix
    :slug: kazzix14
    :github_username: kazzix14
    :gravatar_hash: 9bef53354e30ac4074f5060ab3ed0cbb
    :bio: |
      TwoGateという会社でソフトウェアエンジニアをしています。
      プログラミング言語や音楽、構造などが好きです。
- :title: 基調講演
  :abstract: ''
  :start_at: 2024-10-26 17:30:00.000000000 +09:00
  :duration_minutes: 40
  :track: Room Red
  :speakers:
  - :name: 島田浩二
    :slug: snoozer05
    :github_username: snoozer05
    :gravatar_hash: 941b170e5a115a295cccb5f5cdf0a800
    :bio: Rubyist。株式会社えにしテック代表取締役。一般社団法人日本Rubyの会理事。携わったRuby関連の書籍『Ruby on Railsパフォーマンスアポクリファ』『Rubyのしくみ』『なるほどUnixプロセス』『Ruby逆引きレシピ』。
